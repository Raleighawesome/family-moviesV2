# Cursor AI Rules for Family Movies v2 Project

## Database Safety Rules - CRITICAL

### NEVER Run These Commands Without Explicit User Permission:
- `supabase db reset` (local or remote)
- `supabase db reset --local`
- `supabase db reset --db-url`
- `DROP DATABASE`
- `TRUNCATE TABLE`
- Any command that wipes or resets database data

### Required Database Backup Protocol:
Before making ANY structural database changes:

1. **ALWAYS create a backup first:**
   ```bash
   ./scripts/backup-local-db.sh
   ```

2. **For schema changes, use migrations ONLY:**
   - Create new migration: `npx supabase migration new <description>`
   - Never modify existing migrations that have been applied
   - Apply migrations: `npx supabase migration up` (NOT reset)

3. **If a database reset is absolutely necessary:**
   - Get explicit confirmation from the user
   - Create a backup first using the backup script
   - Inform the user that ALL data will be lost
   - Wait for user to approve after understanding the consequences
   - Show the backup file path after creating it

### Approved Database Operations (No Backup Required):
- Creating new migrations
- Running `supabase migration up` to apply new migrations
- Querying data (SELECT statements)
- Inserting, updating, or deleting specific records
- Regenerating TypeScript types: `npx supabase gen types typescript --local`

### When User Requests Schema Changes:
1. Create a new migration file
2. Write the SQL changes (ALTER TABLE, etc.)
3. Apply with `npx supabase migration up`
4. Regenerate types if needed
5. **NEVER** use `db reset` to apply migrations

## Example Correct Workflow:
```bash
# User wants to add a new column
npx supabase migration new add_new_column
# Edit the migration file
npx supabase migration up --local
npx supabase gen types typescript --local > lib/supabase/types.ts
```

## Example INCORRECT Workflow (DO NOT DO):
```bash
# ‚ùå WRONG - This deletes all data!
npx supabase db reset --local
```

## Recovery Instructions:
If data is accidentally lost, inform the user:
1. Check for backups in `./backups/` directory
2. Restore using: `psql -h 127.0.0.1 -p 54322 -U postgres -d postgres < backups/[backup-file].sql`
3. If no backup exists, inform user that data cannot be recovered

## Additional Project-Specific Rules:

### TypeScript Type Safety:
- Always regenerate Supabase types after schema changes
- Use `@ts-ignore` or `as any` sparingly, only when types are being regenerated
- Remove type assertions once types are updated

### Streaming Services Feature:
- Provider logos come from TMDB: `https://image.tmdb.org/t/p/w92${logo_path}`
- Preferred services stored as string array in `family_prefs.preferred_streaming_services`
- Recommendation tool automatically prioritizes preferred services

### Rating System:
- All ratings are out of 10 stars (not 5)
- CRITICAL: When users say "rated it 5" or any single number, ALWAYS interpret as out of 10 stars (5 = 5/10, not 5/5)
- Use `update_rating` tool to change ratings without creating new watch records
- Use `mark_watched` tool to record new watch events with optional ratings
- Never convert or scale ratings - if user says "5", pass rating: 5 to the tool

### Code Organization:
- Server tools in `server/tools/`
- API routes in `app/api/`
- Database migrations in `supabase/migrations/`
- Always export types and schemas from tool files

## When in Doubt:
If you're unsure whether an operation will delete data, ASK THE USER FIRST before executing.
